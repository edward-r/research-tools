name: Research Kits CI (JS + Python, modular bootstrap)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

concurrency:
  group: research-kits-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-kits:
    name: Validate kits (JS + PY)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]
        kit: [PROJECT_NAME_NODEONLY, DEMO_JS_AsyncPatterns_NODEONLY]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Toolchains ----
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      # ---- (Optional) Install deps at repo root if present ----
      - name: Install Node deps (if package.json exists)
        run: |
          if [ -f package.json ]; then
            npm ci || npm install
          else
            echo "No package.json at repo root — skipping npm install."
          fi

      - name: Install Python deps (if requirements.txt exists)
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt — skipping pip install."
          fi

      # ---- Bootstrap kits via modular entrypoint ----
      - name: Bootstrap kits (if missing)
        run: |
          if [ ! -d "${{ matrix.kit }}" ]; then
            if [ -f scripts/bootstrap/index.mjs ]; then
              echo "Bootstrapping kits…"
              node scripts/bootstrap/index.mjs
            else
              echo "ERROR: ${{ matrix.kit }} not found and no scripts/bootstrap/index.mjs present."
              exit 1
            fi
          fi
          ls -la "${{ matrix.kit }}"

      # ---- JavaScript lane ----
      - name: Run JS demo
        run: make -C "${{ matrix.kit }}" run-js

      - name: Run JS tests
        run: make -C "${{ matrix.kit }}" run-tests

      # ---- Python lane ----
      - name: Run Python demo
        run: make -C "${{ matrix.kit }}" run-py

      - name: Run Python tests
        run: make -C "${{ matrix.kit }}" run-tests-py

      # ---- Artifacts ----
      - name: Upload logs & Evidence Log
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.kit }}-artifacts
          path: |
            ${{ matrix.kit }}/logs/**/*.log
            ${{ matrix.kit }}/logs/*.log
            ${{ matrix.kit }}/notes/*EvidenceLog.md
          if-no-files-found: warn

  watcher-demo:
    name: Watcher demo (JS + PY) on DEMO kit
    runs-on: ubuntu-latest
    needs: validate-kits
    env:
      KIT: DEMO_JS_AsyncPatterns_NODEONLY
      JS_FILE: assets/code/sample_csv_stats.mjs
      PY_FILE: assets/code_py/sample_llm_primitives.py
      LOG: notes/DEMO_JS_AsyncPatterns_EvidenceLog.md

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Install Node deps (if package.json exists)
        run: |
          if [ -f package.json ]; then
            npm ci || npm install
          else
            echo "No package.json at repo root — skipping npm install."
          fi

      - name: Ensure demo kit present (bootstrap if needed)
        run: |
          if [ ! -d "${KIT}" ]; then
            if [ -f scripts/bootstrap/index.mjs ]; then
              echo "Bootstrapping kits…"
              node scripts/bootstrap/index.mjs
            else
              echo "ERROR: ${KIT} not found and no scripts/bootstrap/index.mjs present."
              exit 1
            fi
          fi
          ls -la "${KIT}"

      # ---- JS watcher: run once, trigger, stop ----
      - name: Start JS watcher, trigger change, stop
        working-directory: ${{ env.KIT }}
        shell: bash
        run: |
          node tools/watch_and_log_node.mjs \
            --file "${JS_FILE}" \
            --run "node ${JS_FILE}" \
            --log "${LOG}" \
            --label "$(basename "${JS_FILE}")" \
            > watcher_js.out 2>&1 & echo $! > watcher_js.pid

          sleep 2
          printf '\n' >> "${JS_FILE}"
          sleep 4
          kill $(cat watcher_js.pid) || true
          sleep 1
          echo "---- watcher_js.out ----"
          tail -n +1 watcher_js.out || true

      - name: Verify JS logs exist
        working-directory: ${{ env.KIT }}
        run: |
          count=$(ls -1 logs/run_*.log 2>/dev/null | wc -l | tr -d ' ')
          echo "Logs found: $count"
          if [ "$count" -lt 1 ]; then
            echo "ERROR: No logs produced by JS watcher."
            exit 1
          fi
          newest=$(ls -1t logs/run_*.log | head -n1)
          echo "== $newest ==" && tail -n 60 "$newest"

      # ---- PY watcher: run once, trigger, stop ----
      - name: Start PY watcher, trigger change, stop
        working-directory: ${{ env.KIT }}
        shell: bash
        run: |
          node tools/watch_and_log_node.mjs \
            --file "${PY_FILE}" \
            --run "python3 ${PY_FILE}" \
            --log "${LOG}" \
            --label "$(basename "${PY_FILE}")" \
            > watcher_py.out 2>&1 & echo $! > watcher_py.pid

          sleep 2
          printf '\n' >> "${PY_FILE}"
          sleep 4
          kill $(cat watcher_py.pid) || true
          sleep 1
          echo "---- watcher_py.out ----"
          tail -n +1 watcher_py.out || true

      - name: Verify PY logs exist
        working-directory: ${{ env.KIT }}
        run: |
          count=$(ls -1 logs/run_*.log 2>/dev/null | wc -l | tr -d ' ')
          echo "Logs found: $count"
          if [ "$count" -lt 1 ]; then
            echo "ERROR: No logs produced by PY watcher."
            exit 1
          fi
          newest=$(ls -1t logs/run_*.log | head -n1)
          echo "== $newest ==" && tail -n 60 "$newest"

      - name: Upload watcher artifacts
        uses: actions/upload-artifact@v4
        with:
          name: watcher-demo-artifacts
          path: |
            ${{ env.KIT }}/watcher_js.out
            ${{ env.KIT }}/watcher_js.pid
            ${{ env.KIT }}/watcher_py.out
            ${{ env.KIT }}/watcher_py.pid
            ${{ env.KIT }}/logs/**/*.log
            ${{ env.KIT }}/logs/*.log
            ${{ env.KIT }}/notes/*EvidenceLog.md
          if-no-files-found: warn
